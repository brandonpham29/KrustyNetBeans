/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mypackage;
import javax.swing.JOptionPane;
import java.sql.*;
import net.proteanit.sql.DbUtils;
import javax.swing.DefaultListModel;
import javax.swing.DefaultComboBoxModel;
import java.util.*;
import java.time.*;

/**
 *
 * @author brand
 */
public class OrderHistory extends javax.swing.JFrame {

    /**
     * Creates new form OrderHistory
     */
    DBSearch db = new DBSearch();
    DefaultComboBoxModel<String> MenuItems = new DefaultComboBoxModel();
    
    public OrderHistory() {
        initComponents();
        DisplayTable();
        ResultSet result = db.query("SELECT * FROM public.\"MenuItems\"");
        try {
            while (result.next()) {
                MenuItems.addElement(result.getString("Name"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        MenuItemSelect.setModel(MenuItems);
    }
    public void DisplayTable(){
        try{
            ResultSet result = db.query("SELECT * FROM public.\"OrderHistory\" ORDER BY \"OrderID\" DESC LIMIT 100");
            OrderTable.setModel(DbUtils.resultSetToTableModel(result));
            OrderTable.setAutoCreateRowSorter(true);
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error connecting to Database");
        }
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        ManagerPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        ItemIDTextField = new javax.swing.JTextField();
        NameTextField = new javax.swing.JTextField();
        PriceTextField = new javax.swing.JTextField();
        BaseIngredientsTextField = new javax.swing.JTextField();
        DefaultIngredientsTextField = new javax.swing.JTextField();
        PermissibleIngredientsTextField = new javax.swing.JTextField();
        Update_Add_BTN = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        DeleteItemBTN = new javax.swing.JButton();
        clearBTN = new javax.swing.JButton();
        IngredientsListBTN = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        ViewLeastOrderedItemsBTN = new javax.swing.JButton();
        ViewMostOrderedItemsBTN = new javax.swing.JButton();
        leastOrderedItemLabel = new javax.swing.JLabel();
        mostOrderedItemLabel = new javax.swing.JLabel();
        leastOrderedItemLabel1 = new javax.swing.JLabel();
        leastOrderedItemLabel2 = new javax.swing.JLabel();
        mostOrderedItemLabel1 = new javax.swing.JLabel();
        mostOrderedItemLabel2 = new javax.swing.JLabel();
        leastOrderedItemLabel3 = new javax.swing.JLabel();
        leastOrderedItemLabel4 = new javax.swing.JLabel();
        leastOrderedItemLabel5 = new javax.swing.JLabel();
        mostOrderedItemLabel3 = new javax.swing.JLabel();
        mostOrderedItemLabel4 = new javax.swing.JLabel();
        mostOrderedItemLabel5 = new javax.swing.JLabel();
        DateTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        CustomerIDTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        OrderIDTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        SortOrderHistoryBTN = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        MenuItemSelect = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Back to Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        OrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        OrderTable.getTableHeader().setReorderingAllowed(false);
        OrderTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                OrderTableFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(OrderTable);

        ManagerPane.addTab("Order History", jScrollPane1);

        ItemIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemIDTextFieldActionPerformed(evt);
            }
        });

        NameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NameTextFieldActionPerformed(evt);
            }
        });

        PermissibleIngredientsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PermissibleIngredientsTextFieldActionPerformed(evt);
            }
        });

        Update_Add_BTN.setText("Update/Add");
        Update_Add_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Update_Add_BTNActionPerformed(evt);
            }
        });

        jLabel5.setText("Item ID");

        jLabel6.setText("Name");

        jLabel7.setText("Price");

        jLabel8.setText("Base Ingredients");

        jLabel9.setText("Default Ingredients");

        jLabel10.setText("Permissible Ingredients");

        DeleteItemBTN.setText("Delete Item");
        DeleteItemBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteItemBTNActionPerformed(evt);
            }
        });

        clearBTN.setText("Clear fields");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });

        IngredientsListBTN.setText("Ingredients List");
        IngredientsListBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngredientsListBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(DeleteItemBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(clearBTN)
                    .addComponent(Update_Add_BTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(IngredientsListBTN)
                .addGap(131, 131, 131))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ItemIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(BaseIngredientsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(DefaultIngredientsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PermissibleIngredientsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ItemIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BaseIngredientsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DefaultIngredientsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PermissibleIngredientsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                .addComponent(clearBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(IngredientsListBTN)
                    .addComponent(DeleteItemBTN)
                    .addComponent(Update_Add_BTN))
                .addGap(60, 60, 60))
        );

        ManagerPane.addTab("Edit Menu Items", jPanel1);

        ViewLeastOrderedItemsBTN.setText("View Least Ordered Items");
        ViewLeastOrderedItemsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewLeastOrderedItemsBTNActionPerformed(evt);
            }
        });

        ViewMostOrderedItemsBTN.setText("View Most Ordered Items");
        ViewMostOrderedItemsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewMostOrderedItemsBTNActionPerformed(evt);
            }
        });

        leastOrderedItemLabel.setText("       ");

        mostOrderedItemLabel.setText("        ");

        leastOrderedItemLabel1.setText("       ");

        leastOrderedItemLabel2.setText("       ");

        mostOrderedItemLabel1.setText("        ");

        mostOrderedItemLabel2.setText("        ");

        leastOrderedItemLabel3.setText("       ");

        leastOrderedItemLabel4.setText("       ");

        leastOrderedItemLabel5.setText("       ");

        mostOrderedItemLabel3.setText("        ");

        mostOrderedItemLabel4.setText("        ");

        mostOrderedItemLabel5.setText("        ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(leastOrderedItemLabel)
                    .addComponent(leastOrderedItemLabel1)
                    .addComponent(leastOrderedItemLabel2)
                    .addComponent(leastOrderedItemLabel3)
                    .addComponent(leastOrderedItemLabel4)
                    .addComponent(leastOrderedItemLabel5)
                    .addComponent(ViewLeastOrderedItemsBTN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mostOrderedItemLabel3)
                    .addComponent(mostOrderedItemLabel2)
                    .addComponent(mostOrderedItemLabel1)
                    .addComponent(mostOrderedItemLabel)
                    .addComponent(mostOrderedItemLabel4)
                    .addComponent(mostOrderedItemLabel5)
                    .addComponent(ViewMostOrderedItemsBTN))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewLeastOrderedItemsBTN)
                    .addComponent(ViewMostOrderedItemsBTN))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leastOrderedItemLabel)
                    .addComponent(mostOrderedItemLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leastOrderedItemLabel1)
                    .addComponent(mostOrderedItemLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(leastOrderedItemLabel2)
                    .addComponent(mostOrderedItemLabel2))
                .addGap(46, 46, 46)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(mostOrderedItemLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mostOrderedItemLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mostOrderedItemLabel5))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(leastOrderedItemLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leastOrderedItemLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(leastOrderedItemLabel5)))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        ManagerPane.addTab("Menu Recommendations", jPanel2);

        DateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Date");

        CustomerIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomerIDTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("CustomerID");

        OrderIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderIDTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("OrderID");

        SortOrderHistoryBTN.setText("Sort");
        SortOrderHistoryBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortOrderHistoryBTNActionPerformed(evt);
            }
        });

        jLabel4.setText("Name of Item to Update/Add");

        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        MenuItemSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(CustomerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(OrderIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(SortOrderHistoryBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(MenuItemSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jButton4))
                .addGap(34, 34, 34))
            .addComponent(ManagerPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(SortOrderHistoryBTN)
                            .addComponent(OrderIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CustomerIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MenuItemSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1))
                .addGap(10, 10, 10)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ManagerPane, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dispose();
        FirstForm f = new FirstForm();
        f.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void DateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateTextFieldActionPerformed
        // TODO add your handling code here: {TODO week 4}
    }//GEN-LAST:event_DateTextFieldActionPerformed

    private void CustomerIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomerIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CustomerIDTextFieldActionPerformed

    private void OrderIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderIDTextFieldActionPerformed

    private void SortOrderHistoryBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortOrderHistoryBTNActionPerformed
        try {
            String query = "SELECT * FROM public.\"OrderHistory\" ";
            String CustomerID = CustomerIDTextField.getText();
            String Date = DateTextField.getText();
            Integer OrderID = 0;
            try {
                if (!OrderIDTextField.getText().equals("")) {
                    OrderID = Integer.parseInt(OrderIDTextField.getText());
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
                return;
            }
            boolean firstQuery = true;
            if (!CustomerID.equals("")) {
                query += " WHERE \"CustomerID\" = " + CustomerID;
                firstQuery = false;
            }
            if (!Date.equals("")) {
                if (firstQuery) {
                    query += " WHERE \"Date\" = \'" + Date + "\'";
                    firstQuery = false;
                } else {
                    query += " AND \"Date\" = \'" + Date + "\'";
                }
            }
            if (OrderID > 0) {
                if (firstQuery) {
                    query += " WHERE \"OrderID\" >= " + String.valueOf(OrderID);
                    firstQuery = false;
                } else {
                    query += " AND \"OrderID\" >= " + String.valueOf(OrderID);
                }
            }
            query += " ORDER BY \"OrderID\" LIMIT 100";
            ResultSet result = db.query(query);
            result.next();
            OrderTable.setModel(DbUtils.resultSetToTableModel(result));
            OrderTable.setAutoCreateRowSorter(true);
            
            CustomerIDTextField.setText("");
            DateTextField.setText("");
            OrderIDTextField.setText("");
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_SortOrderHistoryBTNActionPerformed

    private void OrderTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_OrderTableFocusGained
        //sfhhgkdfhgdhgdjkghdfgyidygridfgjkdfhg
    }//GEN-LAST:event_OrderTableFocusGained

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String ItemName = String.valueOf(MenuItemSelect.getSelectedItem());
        
        ResultSet menuresult = db.query("SELECT * FROM public.\"MenuItems\"");
        
        DefaultListModel<String> menuArray = new DefaultListModel();
        
        
        try {
            while (menuresult.next()) {
                menuArray.addElement(menuresult.getString("Name"));
            } 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        
        boolean isInMenu = false;
        
        for (int j = 0; j < menuArray.size(); j++) {
            if (menuArray.getElementAt(j).equals(ItemName)) {
                isInMenu = true;
                break;
            }
        }
        
        if (!isInMenu) {
            ItemIDTextField.setText("");
            NameTextField.setText("");
            PriceTextField.setText("");
            BaseIngredientsTextField.setText("");
            DefaultIngredientsTextField.setText("");
            PermissibleIngredientsTextField.setText("");
            JOptionPane.showMessageDialog(null, "Item is not in menu, fill in fields below to add it");
            return;
        }
        
        
        if (!ItemName.equals("")) {
            ResultSet result = db.query("SELECT * FROM public.\"MenuItems\" WHERE \"Name\" = \'" + ItemName + "\'");
            try {
                result.next();
                String ItemID = result.getString("ItemID");
                String Price = result.getString("Price");
                String BaseIngredients = result.getString("BaseIngredients");
                String DefaultIngredients = result.getString("DefaultIngredients");
                String PermissibleIngredients = result.getString("PermissibleIngredients");
                
                ItemIDTextField.setText(ItemID);
                NameTextField.setText(ItemName);
                PriceTextField.setText(Price);
                BaseIngredientsTextField.setText(BaseIngredients);
                DefaultIngredientsTextField.setText(DefaultIngredients);
                PermissibleIngredientsTextField.setText(PermissibleIngredients);
                
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            return;
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    
ArrayList<Integer> getEntreeOccurrences() {
    
    String date = LocalDate.now().minusMonths(12).toString();
    String newDate = "";
    int counter = 0;
    for (String i : date.split("-")) {
        if (counter == 1 || counter == 2) {
            if (i.length() == 1) {
                newDate += "0" + i;
            } else {
                newDate += i;
            }
        } else {
            newDate += i;
            counter++;
        }
        if (counter != 2) {
            newDate += "-";
        }
    }
    
    String query = "SELECT * FROM public.\"OrderHistory\" WHERE \"Date\" >= \'";
    query += newDate + "\' ORDER BY \"Date\" DESC LIMIT 10000";
    
    ResultSet result = db.query(query);
    ArrayList<Integer> entreeOccurrences = new ArrayList();

    for (int i = 0; i < 50; i++) {
        entreeOccurrences.add(0);
    }

    String ItemsList;
    Integer i_int;
    try {
        while (result.next()) {
            ItemsList = result.getString("TotalOrder");
            ItemsList = ItemsList.substring(1, ItemsList.length() - 1);
            for (String i : ItemsList.split(",")) {
                if (!i.substring(0,1).equals("E")) {
                    continue;
                }
                i = i.strip().substring(1, i.length());
                for (int j = 0; j < i.length(); j++) {
                    if (i.charAt(j) == ('+') || i.charAt(j) == ('-')) {
                        i = i.substring(0, j);
                        break;
                    }
                }
                i_int = Integer.parseInt(i);
                entreeOccurrences.set(i_int, entreeOccurrences.get(i_int) + 1);
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.getMessage());
    }
    return entreeOccurrences;
}
    
    private void ViewLeastOrderedItemsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewLeastOrderedItemsBTNActionPerformed
        ArrayList<Integer> entreeOccurrences = getEntreeOccurrences();
        int minimumIndex = -1;
        int secondMinimumIndex = -1;
        int minimumValue = 100000000;
        int secondMinimumValue = 100000001;
        for (int i = 0; i < entreeOccurrences.size(); i++) {
            if (entreeOccurrences.get(i) <= minimumValue && entreeOccurrences.get(i) > 0) {
                secondMinimumValue = minimumValue;
                secondMinimumIndex = minimumIndex;
                minimumValue = entreeOccurrences.get(i);
                minimumIndex = i;
            } else if (entreeOccurrences.get(i) <= secondMinimumValue && entreeOccurrences.get(i) > 0) {
                secondMinimumValue = entreeOccurrences.get(i);
                secondMinimumIndex = i;
            }
        }
        if (minimumIndex > 0) {
            String ItemID = "E" + String.valueOf(minimumIndex);
            String ItemName = "";
            ResultSet result = db.query("SELECT * FROM public.\"MenuItems\" WHERE \"ItemID\" = \'" + ItemID + "\'");
            try {
                result.next();
                ItemName = result.getString("Name");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            leastOrderedItemLabel.setText("The least ordered entree (in the most recent 10000 orders) is:");
            leastOrderedItemLabel1.setText(ItemName);
            leastOrderedItemLabel2.setText("\nWe recommend lowering the price of this item.");
        }
        if (secondMinimumIndex > 0) {
            String ItemID = "E" + String.valueOf(secondMinimumIndex);
            String ItemName = "";
            ResultSet result = db.query("SELECT * FROM public.\"MenuItems\" WHERE \"ItemID\" = \'" + ItemID + "\'");
            try {
                result.next();
                ItemName = result.getString("Name");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            leastOrderedItemLabel3.setText("The second least ordered entree (in the most recent 10000 orders) is:");
            leastOrderedItemLabel4.setText(ItemName);
            leastOrderedItemLabel5.setText("\nWe recommend decreasing the price of this item as well.");
        }
    }//GEN-LAST:event_ViewLeastOrderedItemsBTNActionPerformed

    private void ViewMostOrderedItemsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewMostOrderedItemsBTNActionPerformed
        ArrayList<Integer> entreeOccurrences = getEntreeOccurrences();
        int maximumIndex = -1;
        int maximumValue = -1;
        int secondMaximumIndex = -1;
        int secondMaximumValue = -1;
        for (int i = 0; i < entreeOccurrences.size(); i++) {
            if (entreeOccurrences.get(i) >= maximumValue && entreeOccurrences.get(i) > 0) {
                secondMaximumValue = maximumValue;
                secondMaximumIndex = maximumIndex;
                maximumValue = entreeOccurrences.get(i);
                maximumIndex = i;
            } else if (entreeOccurrences.get(i) >= secondMaximumValue && entreeOccurrences.get(i) > 0) {
                secondMaximumValue = entreeOccurrences.get(i);
                secondMaximumIndex = i;
            }
        }
        if (maximumIndex > 0) {
            String ItemID = "E" + String.valueOf(maximumIndex);
            String ItemName = "";
            ResultSet result = db.query("SELECT * FROM public.\"MenuItems\" WHERE \"ItemID\" = \'" + ItemID + "\'");
            try {
                result.next();
                ItemName = result.getString("Name");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            mostOrderedItemLabel.setText("The most ordered entree (in the most recent 10000 orders) is:");
            mostOrderedItemLabel1.setText(ItemName);
            mostOrderedItemLabel2.setText("\nWe recommend increasing the price of this item.");
        }
        if (secondMaximumIndex > 0) {
            String ItemID = "E" + String.valueOf(secondMaximumIndex);
            String ItemName = "";
            ResultSet result = db.query("SELECT * FROM public.\"MenuItems\" WHERE \"ItemID\" = \'" + ItemID + "\'");
            try {
                result.next();
                ItemName = result.getString("Name");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
            mostOrderedItemLabel3.setText("The second most ordered entree (in the most recent 10000 orders) is:");
            mostOrderedItemLabel4.setText(ItemName);
            mostOrderedItemLabel5.setText("\nWe recommend increasing the price of this item as well.");
        }
    }//GEN-LAST:event_ViewMostOrderedItemsBTNActionPerformed

    private void IngredientsListBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngredientsListBTNActionPerformed
        IngredientsList ingredientslist = new IngredientsList();
        ingredientslist.setVisible(true);
    }//GEN-LAST:event_IngredientsListBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        ItemIDTextField.setText("");
        NameTextField.setText("");
        PriceTextField.setText("");
        BaseIngredientsTextField.setText("");
        DefaultIngredientsTextField.setText("");
        PermissibleIngredientsTextField.setText("");
    }//GEN-LAST:event_clearBTNActionPerformed

    private void DeleteItemBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteItemBTNActionPerformed
        String ItemID = ItemIDTextField.getText();

        ResultSet menuresult = db.query("SELECT * FROM public.\"MenuItems\"");
        DefaultListModel<String> menuIDArray = new DefaultListModel();
        try {
            while (menuresult.next()) {
                menuIDArray.addElement(menuresult.getString("ItemID"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        boolean isInMenu = false;
        for (int j = 0; j < menuIDArray.size(); j++) {
            if (menuIDArray.getElementAt(j).equals(ItemID)) {
                isInMenu = true;
                break;
            }
        }

        if (!isInMenu) {
            JOptionPane.showMessageDialog(null, "Item is not in menu");
        } else {
            String delete_stmt = "DELETE FROM public.\"MenuItems\" WHERE \"ItemID\" = \'" + ItemID + "\'";
            db.delete(delete_stmt);
            JOptionPane.showMessageDialog(null, "Item deleted from Database");
            ItemIDTextField.setText("");
            NameTextField.setText("");
            PriceTextField.setText("");
            BaseIngredientsTextField.setText("");
            DefaultIngredientsTextField.setText("");
            PermissibleIngredientsTextField.setText("");
        }

    }//GEN-LAST:event_DeleteItemBTNActionPerformed

    private void Update_Add_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Update_Add_BTNActionPerformed

        ResultSet menuresult = db.query("SELECT * FROM public.\"MenuItems\"");
        DefaultListModel<String> menuIDArray = new DefaultListModel();
        try {
            while (menuresult.next()) {
                menuIDArray.addElement(menuresult.getString("ItemID"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

        String ItemID = ItemIDTextField.getText();
        String Name = NameTextField.getText();
        String Price = PriceTextField.getText();
        String BaseIngredients = BaseIngredientsTextField.getText();
        String DefaultIngredients = DefaultIngredientsTextField.getText();
        String PermissibleIngredients = PermissibleIngredientsTextField.getText();

        boolean exitCondition = ItemID.isEmpty() || Name.isEmpty() || Price.isEmpty();
        exitCondition = exitCondition || BaseIngredients.isEmpty();
        exitCondition = exitCondition || DefaultIngredients.isEmpty();
        exitCondition = exitCondition || PermissibleIngredients.isEmpty();
        if (exitCondition) {
            JOptionPane.showMessageDialog(null, "Please fill in all fields");
            return;
        }

        boolean isInMenu = false;
        for (int j = 0; j < menuIDArray.size(); j++) {
            if (menuIDArray.getElementAt(j).equals(ItemID)) {
                isInMenu = true;
                break;
            }
        }

        boolean success = false;
        if (isInMenu) {
            String query = "UPDATE public.\"MenuItems\" ";
            query += "SET \"Name\" = \'" + Name + "\', ";
            query += "\"Price\" = " + Price + ", ";
            query += "\"BaseIngredients\" = \'" + BaseIngredients + "\', ";
            query += "\"DefaultIngredients\" = \'" + DefaultIngredients + "\', ";
            query += "\"PermissibleIngredients\" = \'" + PermissibleIngredients + "\' ";
            query += "WHERE \"ItemID\" = \'" + ItemID + "\'";
            success = db.update(query);
        } else {
            String insert_stmt = "INSERT INTO public.\"MenuItems\"(\"ItemID\",";
            insert_stmt += "\"Name\", \"Price\", \"BaseIngredients\", \"DefaultIngredients\", ";
            insert_stmt += "\"PermissibleIngredients\") VALUES (\'";
            insert_stmt += ItemID + "\', \'" + Name + "\', " + Price + ", \'";
            insert_stmt += BaseIngredients + "\', \'" + DefaultIngredients + "\', \'";
            insert_stmt += PermissibleIngredients + "\')";
            success = db.insert(insert_stmt);
        }

        if (success) {
            ItemIDTextField.setText("");
            NameTextField.setText("");
            PriceTextField.setText("");
            BaseIngredientsTextField.setText("");
            DefaultIngredientsTextField.setText("");
            PermissibleIngredientsTextField.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Epic fail :(");
            return;
        }
    }//GEN-LAST:event_Update_Add_BTNActionPerformed

    private void PermissibleIngredientsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PermissibleIngredientsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PermissibleIngredientsTextFieldActionPerformed

    private void NameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NameTextFieldActionPerformed

    private void ItemIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemIDTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BaseIngredientsTextField;
    private javax.swing.JTextField CustomerIDTextField;
    private javax.swing.JTextField DateTextField;
    private javax.swing.JTextField DefaultIngredientsTextField;
    private javax.swing.JButton DeleteItemBTN;
    private javax.swing.JButton IngredientsListBTN;
    private javax.swing.JTextField ItemIDTextField;
    private javax.swing.JTabbedPane ManagerPane;
    private javax.swing.JComboBox<String> MenuItemSelect;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JTextField OrderIDTextField;
    private javax.swing.JTable OrderTable;
    private javax.swing.JTextField PermissibleIngredientsTextField;
    private javax.swing.JTextField PriceTextField;
    private javax.swing.JButton SortOrderHistoryBTN;
    private javax.swing.JButton Update_Add_BTN;
    private javax.swing.JButton ViewLeastOrderedItemsBTN;
    private javax.swing.JButton ViewMostOrderedItemsBTN;
    private javax.swing.JButton clearBTN;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel leastOrderedItemLabel;
    private javax.swing.JLabel leastOrderedItemLabel1;
    private javax.swing.JLabel leastOrderedItemLabel2;
    private javax.swing.JLabel leastOrderedItemLabel3;
    private javax.swing.JLabel leastOrderedItemLabel4;
    private javax.swing.JLabel leastOrderedItemLabel5;
    private javax.swing.JLabel mostOrderedItemLabel;
    private javax.swing.JLabel mostOrderedItemLabel1;
    private javax.swing.JLabel mostOrderedItemLabel2;
    private javax.swing.JLabel mostOrderedItemLabel3;
    private javax.swing.JLabel mostOrderedItemLabel4;
    private javax.swing.JLabel mostOrderedItemLabel5;
    // End of variables declaration//GEN-END:variables
}
